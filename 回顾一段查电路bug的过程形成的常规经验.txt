
回顾查一段电路BUG的过程形成的常规解决方案

背景：

做视频，想讲BUG如何被发现的，bug是怎么形成的，最后解决方案是怎么出来的。但是磕绊，目光呆滞，预判不命中多有发生。

后有人士提示解决方案——文案处理，但考虑念稿和事情真相之间出入，效果如何，以及写文案累问题，究竟投入产出多少，参考前几节视频效果，似乎有文案辅助确实不同。

昨晚睡觉，想起此事，记录文案记录过程，或是汇总整个情况进行排版整理顺序。若是时间有限，直接不写。Bug 无中生有到被发现解决这期间故事，倒是录视频的重要原因。或者说，没有BUG故事的视频同类型已有，至于此类，先趟一步再说。如果不行，得知道如何不行的。仅此而已。又想到BUG发现似乎多有重复，发现预期不符合，随意看电路，在没有办法中逐帧看线亮灭，顺藤摸瓜，找又有哪个线与预期不符合，看到是数据线，或者是控制线，找到某个与门接错线，某个非门漏掉了，还有以为接线了但是没有接线情况。似乎这样事后回顾，原来是可以成为常规经验。那些偶然发现的BUG，那些贴脸出现的BUG，似乎它们的背景故事，它们的命运，成为了将来不易被发现BUG的参考命运——只需要复制粘贴，看新BUG,回顾往事，就不再慌张，按计划重复当年故事即可解决相当问题。至于电路意义不明，又是在偶然简化电路，在其他设备追加，意外发现可以套用。于是产生如此文案。

剥离BUG的故事与电路产生的故事，时期从一步步试偶然发现bug，原来是低级BUG频率高，瞎猫撞上死耗子；到堆积低级BUG对比发现偶然的高级BUG，但解决方案可直接复用。但BUG分析定性变动。视频时长，前10秒结束背景故事，略讲第一人称发现BUG，预判减少因为预判不命中多导致回滚故事事情更多。


本质：
看视频不能增加第一人称对自我的感知。做电路的时候，面向不能自我感觉时第一时间做出反应的自觉是每个人的特质。也许学习学的是对自我的运用，不只是重复解决办法。


参数：
民用级脑的研发记录系：

排列组合，穷举，复制粘贴，重复，查找默认，预判，休息并陷入回忆改变当前“思考惯性”，记录详情并排序整理。

电路BUG系：

接线没连，以为接上了。接错线或含义不明接线。时钟信号含义不明。有新情况或门没接入。受控限制与门没接入。不知道什么地方有BUG。不知道会不会产生BUG。

解决方案系：

逐帧观察bug周围连线。顺藤摸瓜。从头开始全面检查。重新确认需求。重建参考标准。判断是否可以靠点按钮控制设备。追加按钮。先跑起来再考虑兼容。BUG实体化。

预处理系：

做一步测试一次，出现BUG无需定位，直接推翻重做。追加模块时预测将来可能变化。

合集故事系：

2024-04-24  不知道有没有相关资料，查阅资料发现有：
以 《数字电路与逻辑设计 （张俊涛）》用逻辑门手搓 SRAM 为例 解释SRAM工作原理与设计原理
https://www.bilibili.com/video/BV1Sm421s7kG/

2024-09-06 查指令不执行BUG导致冗余概念的产生以及靠冗余意识到的指令走同样电路：
CPU模块化，靠调试与BUG指引发现冗余使得指令失效，意外发现靠冗余实现指令执行时不同时执行多个效果
https://www.bilibili.com/video/BV1uRHQeCEDT/

2024-10-15 没有目标，但看课本决定一试的内存保护意外打开新电路设备：
在阅读操作系统课本后，尝试实现内存保护硬件电路，最终成功实现第一个内存保护地址检测电路和意外发现原来的寄存器可以变成段寄存器，发现了保护模式默认的段的检测过程
https://www.bilibili.com/video/BV1mJ2dY8EZM/

2024-10-26 不能想象CPU样子，靠测试功能试出来的运算电路：
追加寄存器，扩展指令集，分离经纬控制线与数据线中途，意外重整CPU，并发现设备控制端口与指令一行8个数字调试更方便
https://www.bilibili.com/video/BV1EqyXYeEzt/

2024-05-22内存又读又写是怎么发现的：
2024-05-22 组合SRAM 与 ALU 在又读又写的冲突中发现先读后写两步执行的时间分段后以此理解数据总线和寄存器的发明过程
https://www.bilibili.com/video/BV1PM4m1k7ap/
2025-01-31 重走RAM又读由写，在一时钟读一时钟写理论下，靠增减非门调节相位意外试出ROM RAM兼容的时钟顺序，在最后回顾中逐帧描述电路发现一时钟可以干4件事的可怕上升沿
https://www.bilibili.com/video/BV1UqFjeQEdh/

2024-11-08 没有预判直接摆电路，cache撤回命中的脏位标志寄存器：
2024-11-08 中午在吃早饭时边吃边想，cache电路，参考前几个视频，数据比较成指令，在多寄存器比较线中，想到大一下优先编码器后，最终实现全相联 cache 电路
https://www.bilibili.com/video/BV14YDaYME4H/
2024-11-15 对照上个视频最后发现dirty bit 脏位标记没加上，决意补足电路，在修BUG过程中尝试断线重连与重排描述句子顺序后，成功选择追加脏位控制并实现4路组相联电路
https://www.bilibili.com/video/BV1QcmdYiEZi/

2024-12-04 跃进进程调用，产生新的增长点，但是意外导向指令集上限：
2024-12-04 尝试用硬件模拟时间片进程切换，在摸索穷困4天后继续连接电路，意外追出中断向量表电路，最终停留在搓中断小程序的前一夜
https://www.bilibili.com/video/BV1fCiUYeEWu/
2025-01-24 由反复打开关闭文件看电路，觉得按钮太多不能测试，重返旧电路翻新中，意外重排指令，通过拖动寄存器进入线路意外发现流水线，由此指令集上限扩增
https://www.bilibili.com/video/BV1PsfnYWEzi/

2025-2-06 顺藤摸瓜发现必须要实现的功能，以及受时钟周期一个时钟完成命令需求下重复电路，意识到可以两个寄存器同时运转
双寄存器出栈入栈，用机器指令点按钮复刻函数调用，在搜集文案中意外发现第一个汇编程序无中生有的过程
https://www.bilibili.com/video/BV11DNJeMEim/


2025-2-12 “受前一节时钟周期限制”这一描述明确延时，发现需要延时与无中生有的非门：
在按计划进行中，意外追加非门，瞪出信号延时寄存器出现不同01，解决中断电路的修改PC跳转要维持两时钟长的信号问题
https://www.bilibili.com/video/BV1VNNZeWENL/


事后回想，为什么原始的BUG是全靠意外产生的。在没有自觉的时候产生自觉，只能解释为意外。面向无路可走，无中生有新的路径，也和自觉的产生相同。探索本身就是在不知道旧经验是否有效的情况下进行测试，靠什么样的自觉都得一个一个测试。


以上，民用级脑的研发记录 在电路开发方向探索验证
2025-2-12 20：21
