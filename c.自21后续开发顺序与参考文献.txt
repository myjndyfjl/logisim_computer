2025-1-31 23：17

入栈但是地址增大，和其他文案不合，决定改约定俗成的入栈



入栈，由高地址向低地址生长
对应接线写开关不变，增减控制线重连

入栈，在默认栈位置读取数据，恰好就是参数，靠格式实现读取的数据整好是参数
根据文案具体到版图
https://blog.csdn.net/WolvenSec/article/details/139185611

系统调用中出现的两个栈，两个生长点不同
https://blog.csdn.net/qq_43646576/article/details/102841078
由此栈地址不同，不能默认位置，寄存器参数传递，但是传地址“Linux也是通过寄存器完成的。Linux最多允许向系统调用传递6个参数”


2025-2-1 15：17
连内存比较，模拟系统调用解除权限准备，调用时寄存器复位

2025-2-2 19：43

系统调用，在入栈后，寄存器改写参数启动中断

函数调用，入栈后，寄存器复位

参数返回，某地址写入数据，改写默认位置数据，返回值在内存不在寄存器，寄存器则状态还原覆盖，默认位置由临时变量在编译期间生成，函数使用完成释放？调用时，入栈前生成临时地址？时期未知，但有存在默认地址情况


2025-2-4 13：37

床上想出栈入栈后，jmp跳转地址执行函数，加载常数，加载栈地址，基地址偏移读取数据，突然意识到可以如此，决定尝试验证
2025-2-4 18：30 
才开始验证，之前去搜索现成CPUlogisim文件，逛赛博超市

2025-2-4  18：40
函数调用，保存现场否？保存在相同堆栈？
函数调用与保存现场 一搜竟然可达，原来是有人捷足先登
https://blog.csdn.net/xiaoyink/article/details/101644497

系统调用要保存所有寄存器，栈，程序计数器，
2024-2-4 19：13
可能的汇编器实现不止逐行翻译
https://zhuanlan.zhihu.com/p/437866784

自举！第一个汇编器原来是是先用汇编写，然后人脑翻译二进制
https://blog.csdn.net/qq_17065591/article/details/107644928

2024-2-5 10：00
比较指令重连线解决必然执行一种条件而不是自动往下执行问题，内存保护拟打算接入选线切换

2024-2-5 11：48
未来去向：增加显示屏，打印字符，或者先跑中断，内存越界中断，调用系统调用，打印错误代码到显示屏上，或寄存器中。


2024-2-7 20：02
评论区专业人士提示使用成熟工业流程进行静态时序验证。受节约精力启发，决定开发记录进行压缩，视频故事比重减少，接轨传统讲义流程

2024-2-9 12：42
有共用PC，指令读取后连线可合并，实现默认程序与中断程序共用ROM，但没有连线，调试需要。且内存开保护未调试，中断进行系统调用时，关内存保护未考虑，
考虑到之后程序受保护影响，代码多设置参数，不好立即看结果，决定暂缓内存保护与地址越界中断。而测试探索指令集具体内容作为主方向。